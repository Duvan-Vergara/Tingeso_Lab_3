#!/usr/bin/env powershell
<#
.SYNOPSIS
    Configurador Automatizado de Jenkins para TINGESO Lab 3
    
.DESCRIPTION
    Este script te gu√≠a paso a paso para configurar Jenkins con JMeter y Selenium.
    Incluye instalaci√≥n de plugins, configuraci√≥n de herramientas, y creaci√≥n del pipeline.
#>

param(
    [switch]$ShowSetup = $false,
    [switch]$InstallPlugins = $false,
    [switch]$CreatePipeline = $false
)

Write-Host 'üöÄ CONFIGURADOR JENKINS - TINGESO LAB 3' -ForegroundColor Cyan
Write-Host ('=' * 70) -ForegroundColor Cyan

function Show-JenkinsSetupGuide {
    Write-Host 'üìã GU√çA PASO A PASO - CONFIGURACI√ìN JENKINS' -ForegroundColor Magenta
    Write-Host
    
    Write-Host '‚úÖ PASO 1: DESBLOQUEAR JENKINS' -ForegroundColor Green
    Write-Host '1. Abrir: http://localhost:8080' -ForegroundColor Gray
    Write-Host '2. Usar contrase√±a inicial: f1bd7512585540298fa565cc85ab9d2d' -ForegroundColor Yellow
    Write-Host '3. Seleccionar "Install suggested plugins"' -ForegroundColor Gray
    Write-Host
    
    Write-Host '‚úÖ PASO 2: CREAR USUARIO ADMIN' -ForegroundColor Green
    Write-Host 'Usuario: admin' -ForegroundColor Gray
    Write-Host 'Password: admin123' -ForegroundColor Gray
    Write-Host 'Email: admin@tingeso.com' -ForegroundColor Gray
    Write-Host
    
    Write-Host '‚úÖ PASO 3: INSTALAR PLUGINS NECESARIOS' -ForegroundColor Green
    Write-Host 'Ir a: Manage Jenkins ‚Üí Plugins ‚Üí Available' -ForegroundColor Gray
    Write-Host 'Buscar e instalar:' -ForegroundColor Gray
    Write-Host '  ‚Ä¢ Performance Plugin (OBLIGATORIO para JMeter)' -ForegroundColor Yellow
    Write-Host '  ‚Ä¢ HTML Publisher Plugin (para reportes)' -ForegroundColor Yellow
    Write-Host '  ‚Ä¢ SonarQube Scanner Plugin (para an√°lisis calidad)' -ForegroundColor Yellow
    Write-Host '  ‚Ä¢ Workspace Cleanup Plugin (recomendado)' -ForegroundColor Yellow
    Write-Host '  ‚ö†Ô∏è  NO instalar "JMeter Plugin" - usar Performance Plugin' -ForegroundColor Red
    Write-Host
    
    Write-Host '‚úÖ PASO 4: CONFIGURAR HERRAMIENTAS' -ForegroundColor Green
    Write-Host 'Ir a: Manage Jenkins ‚Üí Global Tool Configuration' -ForegroundColor Gray
    Write-Host 'Configurar SOLO:' -ForegroundColor Gray
    Write-Host '  ‚Ä¢ JDK installations:' -ForegroundColor Yellow
    Write-Host '    - Name: OpenJDK-21' -ForegroundColor White
    Write-Host '    - JAVA_HOME: /opt/java/openjdk' -ForegroundColor White
    Write-Host '    - DESMARCAR "Install automatically"' -ForegroundColor Red
    Write-Host '  ‚úÖ JMeter se descarga autom√°ticamente en el pipeline' -ForegroundColor Green
    Write-Host '  ‚úÖ Performance Plugin ya instalado para reportes' -ForegroundColor Green
    Write-Host
    
    Write-Host '‚úÖ PASO 4.5: CONFIGURAR SONARQUBE PARA JENKINS Y GITHUB' -ForegroundColor Green
    Write-Host 'PASOS VALIDADOS PARA SONARQUBE:' -ForegroundColor Cyan
    Write-Host
    Write-Host '1Ô∏è‚É£ EJECUTAR SONARQUBE:' -ForegroundColor Yellow
    Write-Host '   docker run -d --name sonarqube -p 9000:9000 sonarqube:lts' -ForegroundColor Cyan
    Write-Host '   URL local: http://localhost:9000' -ForegroundColor White
    Write-Host
    Write-Host '2Ô∏è‚É£ EXPONER CON NGROK (para GitHub Actions):' -ForegroundColor Yellow
    Write-Host '   ngrok http 9000' -ForegroundColor Cyan
    Write-Host '   ‚ö†Ô∏è  Guardar la URL p√∫blica (ej: https://3b6d-181-62-49-142.ngrok-free.app)' -ForegroundColor Red
    Write-Host
    Write-Host '3Ô∏è‚É£ CONFIGURAR SECRETS EN GITHUB:' -ForegroundColor Yellow
    Write-Host '   ‚Üí GitHub ‚Üí Settings ‚Üí Secrets and variables ‚Üí Actions' -ForegroundColor Gray
    Write-Host '   ‚Üí New repository secret: SONAR_HOST_URL = URL ngrok p√∫blica' -ForegroundColor White
    Write-Host '   ‚Üí New repository secret: SONAR_TOKEN = token SonarQube' -ForegroundColor White
    Write-Host
    Write-Host '4Ô∏è‚É£ GENERAR TOKEN EN SONARQUBE:' -ForegroundColor Yellow
    Write-Host '   ‚Üí Abrir URL ngrok en navegador' -ForegroundColor Gray
    Write-Host '   ‚Üí Login: admin / admin (cambiar password si necesario)' -ForegroundColor Gray
    Write-Host '   ‚Üí My Account ‚Üí Security ‚Üí Generate Tokens' -ForegroundColor Gray
    Write-Host '   ‚Üí Name: github-integration ‚Üí Generate' -ForegroundColor Gray
    Write-Host '   ‚Üí ‚úÖ COPIAR TOKEN (empieza con sqp_...)' -ForegroundColor Red
    Write-Host
    Write-Host '5Ô∏è‚É£ CONFIGURAR EN JENKINS (opcional):' -ForegroundColor Yellow
    Write-Host '   ‚Üí Manage Jenkins ‚Üí System ‚Üí SonarQube servers' -ForegroundColor Gray
    Write-Host '   ‚Üí Name: SonarQube-Local' -ForegroundColor White
    Write-Host '   ‚Üí Server URL: http://localhost:9000 (o ngrok URL)' -ForegroundColor White
    Write-Host '   ‚Üí Server authentication token: (usar el token generado)' -ForegroundColor Gray
    Write-Host
    Write-Host 'üìã Ver gu√≠a detallada: SONARQUBE-GITHUB-VALIDADO.md' -ForegroundColor Magenta
    Write-Host
    
    Write-Host '‚úÖ PASO 5: CREAR PIPELINE CON GITHUB' -ForegroundColor Green
    Write-Host '1. New Item ‚Üí Pipeline ‚Üí Nombre: "TINGESO-Performance-Tests"' -ForegroundColor Gray
    Write-Host '2. Descripci√≥n: "Pruebas automatizadas JMeter + Selenium para TINGESO Lab 3"' -ForegroundColor Gray
    Write-Host '3. ‚úÖ Marcar "Esta ejecuci√≥n debe parametrizarse"' -ForegroundColor Green
    Write-Host '4. GitHub project URL: https://github.com/Duvan-Vergara/Tingeso_Lab_3' -ForegroundColor Yellow
    Write-Host '5. Pipeline Definition: "Pipeline script from SCM"' -ForegroundColor Gray
    Write-Host '6. SCM: Git' -ForegroundColor Gray
    Write-Host '7. Repository URL: https://github.com/Duvan-Vergara/Tingeso_Lab_3.git' -ForegroundColor Yellow
    Write-Host '8. Branch: */main (o */master)' -ForegroundColor Gray
    Write-Host '9. Script Path: jenkins/Jenkinsfile' -ForegroundColor Gray
    Write-Host '10. ‚úÖ Marcar "Use Groovy Sandbox"' -ForegroundColor Green
    Write-Host
    
    Write-Host 'üéØ ARCHIVOS JENKINS YA CONFIGURADOS:' -ForegroundColor Cyan
    if (Test-Path 'jenkins/Jenkinsfile') {
        Write-Host '  ‚úÖ jenkins/Jenkinsfile' -ForegroundColor Green
    } else {
        Write-Host '  ‚ùå jenkins/Jenkinsfile (falta)' -ForegroundColor Red
    }
    
    if (Test-Path 'jenkins/scripts') {
        Write-Host '  ‚úÖ jenkins/scripts/ (an√°lisis autom√°tico)' -ForegroundColor Green
    } else {
        Write-Host '  ‚ùå jenkins/scripts/ (falta)' -ForegroundColor Red
    }
    
    if (Test-Path 'SONARQUBE-GITHUB-VALIDADO.md') {
        Write-Host '  ‚úÖ SONARQUBE-GITHUB-VALIDADO.md (gu√≠a SonarQube)' -ForegroundColor Green
    }
    
    if (Test-Path 'VERIFICADOR-FINAL-INTEGRACIONES.ps1') {
        Write-Host '  ‚úÖ VERIFICADOR-FINAL-INTEGRACIONES.ps1 (validaci√≥n)' -ForegroundColor Green
    }
    
    if (Test-Path 'ESTADO-FINAL-PROYECTO.md') {
        Write-Host '  ‚úÖ ESTADO-FINAL-PROYECTO.md (resumen completo)' -ForegroundColor Green
    }
    
    Write-Host
    Write-Host 'üöÄ DESPU√âS DE CONFIGURAR:' -ForegroundColor Yellow
    Write-Host 'Ejecutar pipeline: Build Now ‚Üí Ver resultados en Performance Trend' -ForegroundColor Gray
    Write-Host
    Write-Host 'üîç VERIFICAR INTEGRACI√ìN COMPLETA:' -ForegroundColor Cyan
    Write-Host '.\VERIFICADOR-FINAL-INTEGRACIONES.ps1' -ForegroundColor White
    Write-Host
    Write-Host 'üìä VER ESTADO COMPLETO DEL PROYECTO:' -ForegroundColor Cyan
    Write-Host 'Get-Content .\ESTADO-FINAL-PROYECTO.md' -ForegroundColor White
}

function Show-PluginInstallCommands {
    Write-Host 'üîß COMANDOS CLI PARA INSTALAR PLUGINS' -ForegroundColor Magenta
    Write-Host
    Write-Host 'Si prefieres instalar via CLI:' -ForegroundColor Yellow
    
    $plugins = @(
        'performance',
        'jmeter',
        'htmlpublisher',
        'ws-cleanup',
        'build-timeout',
        'timestamper'
    )
    
    Write-Host
    foreach ($plugin in $plugins) {
        Write-Host "java -jar jenkins-cli.jar -s http://localhost:8080/ install-plugin $plugin" -ForegroundColor Gray
    }
    Write-Host
    Write-Host 'Luego reiniciar Jenkins:' -ForegroundColor Yellow
    Write-Host 'java -jar jenkins-cli.jar -s http://localhost:8080/ restart' -ForegroundColor Gray
}

function Test-JenkinsReady {
    Write-Host 'üîç VERIFICANDO ESTADO DE JENKINS' -ForegroundColor Magenta
    
    try {
        $response = Invoke-WebRequest -Uri 'http://localhost:8080' -TimeoutSec 5 -UseBasicParsing
        if ($response.StatusCode -eq 200) {
            Write-Host '‚úÖ Jenkins est√° funcionando en http://localhost:8080' -ForegroundColor Green
            
            if ($response.Content -match 'Please use the following password') {
                Write-Host '‚ö†Ô∏è  Jenkins necesita configuraci√≥n inicial' -ForegroundColor Yellow
                Write-Host 'üîë Contrase√±a: f1bd7512585540298fa565cc85ab9d2d' -ForegroundColor Cyan
            } elseif ($response.Content -match 'Dashboard') {
                Write-Host '‚úÖ Jenkins ya est√° configurado y listo' -ForegroundColor Green
            }
            return $true
        }
    }
    catch {
        Write-Host '‚ùå Jenkins no est√° disponible' -ForegroundColor Red
        Write-Host 'Iniciar con: docker run -d -p 8080:8080 --name jenkins-tingeso jenkins/jenkins:lts' -ForegroundColor Yellow
        return $false
    }
}

function Show-PipelineExample {
    Write-Host 'üìÑ EJEMPLO DE CONFIGURACI√ìN PIPELINE' -ForegroundColor Magenta
    Write-Host
    Write-Host 'Nombre del Pipeline: TINGESO-Performance-Tests' -ForegroundColor Yellow
    Write-Host 'Descripci√≥n: Pruebas automatizadas JMeter + Selenium para TINGESO Lab 3' -ForegroundColor Gray
    Write-Host
    Write-Host 'Build Triggers:' -ForegroundColor Yellow
    Write-Host '  ‚òë Build periodically: H/30 * * * * (cada 30 min)' -ForegroundColor Gray
    Write-Host '  ‚òë Poll SCM: H/5 * * * * (cada 5 min)' -ForegroundColor Gray
    Write-Host
    Write-Host 'Pipeline Script Path: jenkins/Jenkinsfile' -ForegroundColor Yellow
    Write-Host
    Write-Host 'Configuraci√≥n Post-build:' -ForegroundColor Yellow
    Write-Host '  ‚Ä¢ Performance Report: **/*.jtl' -ForegroundColor Gray
    Write-Host '  ‚Ä¢ HTML Publisher: jmeter-results/*/index.html' -ForegroundColor Gray
    Write-Host '  ‚Ä¢ Archive Artifacts: **/*.jtl, **/*.json' -ForegroundColor Gray
}

function Create-JenkinsJobScript {
    $jobScript = @'
#!/bin/bash
# Script para crear job de Jenkins autom√°ticamente con GitHub

JENKINS_URL="http://localhost:8080"
JOB_NAME="TINGESO-Performance-Tests"
GITHUB_REPO="https://github.com/Duvan-Vergara/Tingeso_Lab_3.git"

# Crear job XML con configuraci√≥n GitHub
cat > tingeso-job.xml << 'EOF'
<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job">
  <actions/>
  <description>Pruebas automatizadas JMeter + Selenium para TINGESO Lab 3 - GitHub Integration</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.ChoiceParameterDefinition>
          <name>TEST_TYPE</name>
          <description>Tipo de prueba a ejecutar</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>all</string>
              <string>load</string>
              <string>stress</string>
              <string>volume</string>
              <string>functional</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>BASE_URL</name>
          <description>URL base del sistema Karting</description>
          <defaultValue>http://localhost:30088</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>POPULATE_DATABASE</name>
          <description>Poblar base de datos con datos de prueba</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers>
        <hudson.triggers.SCMTrigger>
          <spec>H/5 * * * *</spec>
          <ignorePostCommitHooks>false</ignorePostCommitHooks>
        </hudson.triggers.SCMTrigger>
        <hudson.triggers.TimerTrigger>
          <spec>H 2 * * *</spec>
        </hudson.triggers.TimerTrigger>
      </triggers>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsScmFlowDefinition" plugin="workflow-cps">
    <scm class="hudson.plugins.git.GitSCM" plugin="git">
      <configVersion>2</configVersion>
      <userRemoteConfigs>
        <hudson.plugins.git.UserRemoteConfig>
          <url>https://github.com/Duvan-Vergara/Tingeso_Lab_3.git</url>
        </hudson.plugins.git.UserRemoteConfig>
      </userRemoteConfigs>
      <branches>
        <hudson.plugins.git.BranchSpec>
          <name>*/main</name>
        </hudson.plugins.git.BranchSpec>
      </branches>
      <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
      <gitTool>Default</gitTool>
    </scm>
    <scriptPath>jenkins/Jenkinsfile</scriptPath>
    <lightweight>true</lightweight>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>
EOF

# Crear el job
echo "Creando pipeline job con GitHub integration..."
curl -X POST "$JENKINS_URL/createItem?name=$JOB_NAME" \
  --header "Content-Type: application/xml" \
  --data @tingeso-job.xml

if [ $? -eq 0 ]; then
    echo "‚úÖ Job '$JOB_NAME' creado exitosamente!"
    echo "üîó Acceder en: $JENKINS_URL/job/$JOB_NAME/"
    echo "üìä GitHub: https://github.com/Duvan-Vergara/Tingeso_Lab_3"
    echo "üöÄ Ejecutar: Build with Parameters"
else
    echo "‚ùå Error creando el job"
fi
'@

    $jobScript | Out-File -FilePath 'create-jenkins-job-github.sh' -Encoding UTF8
    Write-Host 'üìÑ Script con GitHub integration guardado en: create-jenkins-job-github.sh' -ForegroundColor Green
    Write-Host 'Ejecutar con: bash create-jenkins-job-github.sh' -ForegroundColor Gray
}

# MEN√ö PRINCIPAL
function Show-ConfigMenu {
    Write-Host
    Write-Host "OPCIONES DE CONFIGURACI√ìN:" -ForegroundColor Yellow
    Write-Host "1. üìã Ver gu√≠a paso a paso completa" -ForegroundColor Green
    Write-Host "2. üîß Ver comandos de instalaci√≥n de plugins" -ForegroundColor Blue
    Write-Host "3. üîç Verificar estado de Jenkins" -ForegroundColor Cyan
    Write-Host "4. üìÑ Ver ejemplo de configuraci√≥n pipeline" -ForegroundColor Magenta
    Write-Host "5. ü§ñ Crear script de job autom√°tico" -ForegroundColor Yellow
    Write-Host "6. üåê Abrir Jenkins en navegador" -ForegroundColor Blue
    Write-Host "7. ‚ùå Salir" -ForegroundColor Gray
    
    $choice = Read-Host "`nSelecciona una opci√≥n (1-7)"
    
    switch ($choice) {
        '1' { Show-JenkinsSetupGuide }
        '2' { Show-PluginInstallCommands }
        '3' { Test-JenkinsReady }
        '4' { Show-PipelineExample }
        '5' { Create-JenkinsJobScript }
        '6' { 
            Start-Process "http://localhost:8080"
            Write-Host "üåê Jenkins abierto en navegador" -ForegroundColor Green
        }
        '7' { 
            Write-Host 'Configuraci√≥n completada!' -ForegroundColor Green
            return
        }
        default { 
            Write-Host 'Opci√≥n no v√°lida' -ForegroundColor Red
            Show-ConfigMenu
        }
    }
    
    Write-Host
    Read-Host "Presiona Enter para continuar..."
    Show-ConfigMenu
}

# EJECUCI√ìN PRINCIPAL
if ($ShowSetup) {
    Show-JenkinsSetupGuide
} elseif ($InstallPlugins) {
    Show-PluginInstallCommands
} elseif ($CreatePipeline) {
    Show-PipelineExample
    Create-JenkinsJobScript
} else {
    Test-JenkinsReady
    Show-ConfigMenu
}

Write-Host
Write-Host "üéØ RESUMEN CONFIGURACI√ìN COMPLETA:" -ForegroundColor Cyan
Write-Host "‚úÖ Jenkins corriendo en: http://localhost:8080" -ForegroundColor Green
Write-Host "‚úÖ SonarQube + GitHub Actions: Configurado y validado" -ForegroundColor Green
Write-Host "‚úÖ Jenkinsfile listo en: jenkins/Jenkinsfile" -ForegroundColor Green
Write-Host "‚úÖ Verificaci√≥n disponible: .\VERIFICADOR-FINAL-INTEGRACIONES.ps1" -ForegroundColor Green
Write-Host "‚úÖ Estado del proyecto: .\ESTADO-FINAL-PROYECTO.md" -ForegroundColor Green
Write-Host "üöÄ Sistema completamente listo para evaluaci√≥n" -ForegroundColor Cyan
