<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="RF8 - REPORTE INGRESOS - STRESS TEST" enabled="true">
      <stringProp name="TestPlan.comments">STRESS TESTING para RF8 - Reporte de Ingresos</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"/>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Stress Test - ${__P(USERS,5000)} Usuarios MÁXIMO" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControllerGui" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${__P(LOOPS,100)}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(USERS,5000)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(RAMP_TIME,120)}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${__P(DURATION,3600)}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
      </ThreadGroup>
      <hashTree>
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Dynamic Stress Report Periods" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="script">
import java.text.SimpleDateFormat
import java.util.Calendar

def threadNum = ctx.getThreadNum()
def iterationNum = vars.get("__jm__Loop Controller__idx") as Integer ?: 0
def uniqueId = (threadNum * 10000) + iterationNum

def cal = Calendar.getInstance()
def dateFormat = new SimpleDateFormat("yyyy-MM-dd")
def periodType = uniqueId % 4

switch (periodType) {
    case 0:
        cal.add(Calendar.DAY_OF_YEAR, -(uniqueId % 7))
        def startDate = cal.getTime()
        cal.add(Calendar.DAY_OF_YEAR, 1)
        def endDate = cal.getTime()
        vars.put("reportStart", dateFormat.format(startDate))
        vars.put("reportEnd", dateFormat.format(endDate))
        vars.put("periodType", "DAILY")
        break
    case 1:
        cal.add(Calendar.WEEK_OF_YEAR, -(uniqueId % 4))
        def startDate = cal.getTime()
        cal.add(Calendar.WEEK_OF_YEAR, 1)
        def endDate = cal.getTime()
        vars.put("reportStart", dateFormat.format(startDate))
        vars.put("reportEnd", dateFormat.format(endDate))
        vars.put("periodType", "WEEKLY")
        break
    case 2:
        cal.add(Calendar.MONTH, -(uniqueId % 3))
        def startDate = cal.getTime()
        cal.add(Calendar.MONTH, 1)
        def endDate = cal.getTime()
        vars.put("reportStart", dateFormat.format(startDate))
        vars.put("reportEnd", dateFormat.format(endDate))
        vars.put("periodType", "MONTHLY")
        break
    case 3:
        cal.add(Calendar.YEAR, -1)
        def startDate = cal.getTime()
        cal.add(Calendar.YEAR, 1)
        def endDate = cal.getTime()
        vars.put("reportStart", dateFormat.format(startDate))
        vars.put("reportEnd", dateFormat.format(endDate))
        vars.put("periodType", "YEARLY")
        break
}
          </stringProp>
        </JSR223PreProcessor>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RF8-STRESS: Generar Reporte Ingresos (${periodType})">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">localhost</stringProp>
          <stringProp name="HTTPSampler.port">30088</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.path">/api/reportes/report/tariff?startDate=${reportStart}&amp;endDate=${reportEnd}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verificar Response 200" enabled="true">
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verificar Content-Type Excel" enabled="true">
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49587">application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</stringProp>
            </collectionProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verificar Nombre Archivo" enabled="true">
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49588">reporte_tarifas.xlsx</stringProp>
            </collectionProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="AssertionGui" testclass="JSR223Assertion" testname="Validar tamaño mínimo archivo Excel" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="script">
if (prev.getResponseData().length &lt; 1000) {
    AssertionResult.setFailure(true)
    AssertionResult.setFailureMessage("El archivo Excel es demasiado pequeño")
}
            </stringProp>
          </JSR223Assertion>
          <hashTree/>
          <DurationAssertion guiclass="AssertionGui" testclass="DurationAssertion" testname="Reporte debe tardar &lt; 30s" enabled="true">
            <stringProp name="DurationAssertion.duration">30000</stringProp>
          </DurationAssertion>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
