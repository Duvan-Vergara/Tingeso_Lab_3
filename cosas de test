Implementación de pruebas para la aplicación en Kubernetes
1. Pruebas de Usabilidad
Nielsen Heuristics
Para implementar una evaluación heurística basada en los principios de Nielsen:
# Checklist de Evaluación Heurística de Nielsen

## Instrucciones
Para cada heurística, evalúa la interfaz con una puntuación de 0 (no cumple) a 4 (cumple completamente).

## 1. Visibilidad del estado del sistema
- [ ] El sistema muestra claramente qué está haciendo
- [ ] Los tiempos de respuesta son apropiados
- [ ] Hay retroalimentación visual para acciones importantes

## 2. Coincidencia entre el sistema y el mundo real
- [ ] El lenguaje es familiar para el usuario
- [ ] La información aparece en un orden lógico y natural

## 3. Control y libertad del usuario
- [ ] Existe una función "deshacer" para acciones importantes
- [ ] Es fácil salir de estados no deseados

## (Continuar con las 10 heurísticas de Nielsen...)

## Resultados
- Puntuación total: __/40
- Problemas críticos identificados:
  1. 
  2.
- Recomendaciones:
  1.
  2.

--------------------------------------------------------------------------------------------------
Prueba SUS (System Usability Scale)

# Cuestionario SUS (System Usability Scale)

## Instrucciones
Por favor responde a las siguientes afirmaciones con una puntuación de 1 (totalmente en desacuerdo) a 5 (totalmente de acuerdo).

1. Creo que usaría este sistema frecuentemente
   [ ] 1 [ ] 2 [ ] 3 [ ] 4 [ ] 5

2. Encontré el sistema innecesariamente complejo
   [ ] 1 [ ] 2 [ ] 3 [ ] 4 [ ] 5

3. Pensé que el sistema era fácil de usar
   [ ] 1 [ ] 2 [ ] 3 [ ] 4 [ ] 5

4. Creo que necesitaría ayuda de una persona con conocimientos técnicos para usar este sistema
   [ ] 1 [ ] 2 [ ] 3 [ ] 4 [ ] 5

5. Las funciones de este sistema están bien integradas
   [ ] 1 [ ] 2 [ ] 3 [ ] 4 [ ] 5

6. Pensé que había demasiada inconsistencia en este sistema
   [ ] 1 [ ] 2 [ ] 3 [ ] 4 [ ] 5

7. Imagino que la mayoría de las personas aprenderían a usar este sistema muy rápidamente
   [ ] 1 [ ] 2 [ ] 3 [ ] 4 [ ] 5

8. Encontré el sistema muy incómodo de usar
   [ ] 1 [ ] 2 [ ] 3 [ ] 4 [ ] 5

9. Me sentí muy confiado al usar el sistema
   [ ] 1 [ ] 2 [ ] 3 [ ] 4 [ ] 5

10. Necesité aprender muchas cosas antes de ser capaz de usar este sistema
    [ ] 1 [ ] 2 [ ] 3 [ ] 4 [ ] 5

## Cálculo de la puntuación SUS
Para calcular la puntuación SUS:
1. Para las preguntas impares (1,3,5,7,9): restar 1 de la puntuación del usuario
2. Para las preguntas pares (2,4,6,8,10): restar la puntuación del usuario de 5
3. Sumar todas las puntuaciones convertidas y multiplicar por 2.5

Una puntuación SUS por encima de 68 se considera por encima del promedio.

--------------------------------------------------------------------------------------------------
2. Pruebas Funcionales
Script para pruebas funcionales automatizadas con Cypress

describe('Pruebas funcionales de la aplicación', () => {
  beforeEach(() => {
    // Configurar la URL base según el entorno
    const baseUrl = Cypress.env('ENV') === 'PC' 
      ? 'http://172.26.48.240:30080' 
      : 'http://localhost:30080';
    
    cy.visit(baseUrl);
  });

  it('Debería cargar la página principal correctamente', () => {
    cy.contains('Karting RM').should('be.visible');
    cy.get('nav').should('exist');
    // Verificar elementos específicos de la UI
  });

  it('Debería navegar a la sección de pilotos', () => {
    cy.get('[data-cy=pilotos-link]').click();
    cy.url().should('include', '/pilotos');
    cy.get('h1').contains('Pilotos').should('be.visible');
  });

  it('Debería mostrar los datos correctos de un piloto', () => {
    cy.get('[data-cy=pilotos-link]').click();
    cy.get('[data-cy=piloto-item]').first().click();
    cy.get('[data-cy=piloto-nombre]').should('be.visible');
    cy.get('[data-cy=piloto-equipo]').should('be.visible');
  });

  // Más pruebas para otras funcionalidades...
});


--------------------------------------------------------------------------------------------------
Script para instalar y ejecutar Cypress

@echo off
echo Instalando Cypress para pruebas funcionales...
cd tests\functional
npm init -y
npm install cypress --save-dev

echo Configurando Cypress...
npx cypress open

echo Para ejecutar pruebas en modo headless:
echo npx cypress run

echo Para ejecutar pruebas en el entorno de PC:
echo npx cypress run --env ENV=PC

echo Para ejecutar pruebas en el entorno de Notebook:
echo npx cypress run --env ENV=NOTEBOOK


--------------------------------------------------------------------------------------------------
3. Pruebas de Rendimiento
JMeter para pruebas de carga


<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Karting RM Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Usuario Web" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">10</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">50</stringProp>
        <stringProp name="ThreadGroup.ramp_time">20</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <!-- Configuración de HTTP Request -->
        <!-- Otras configuraciones de JMeter... -->
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>


--------------------------------------------------------------------------------------------------
Script para pruebas de rendimiento con k6

:\Users\Duvan\Desktop\TINGESO\Laboratorio 3\Tingeso_Lab_3\tests\performance\k6_load_test.js
import http from 'k6/http';
import { sleep, check } from 'k6';
import { Counter } from 'k6/metrics';

// Configuración del entorno
const BASE_URL = __ENV.BASE_URL || 'http://localhost:30080';
const errors = new Counter('errors');

export const options = {
  stages: [
    { duration: '30s', target: 20 }, // Aumento gradual a 20 usuarios
    { duration: '1m', target: 20 },  // Mantener 20 usuarios por 1 minuto
    { duration: '30s', target: 50 }, // Aumentar a 50 usuarios
    { duration: '1m', target: 50 },  // Mantener 50 usuarios por 1 minuto
    { duration: '30s', target: 0 },  // Reducir gradualmente a 0 usuarios
  ],
  thresholds: {
    http_req_duration: ['p(95)<500'], // 95% de las solicitudes deben completarse en menos de 500ms
    errors: ['count<10'],            // Menos de 10 errores en total
  },
};

export default function() {
  // Página principal
  let response = http.get(`${BASE_URL}/`);
  check(response, {
    'homepage status is 200': (r) => r.status === 200,
    'homepage loads in less than 1s': (r) => r.timings.duration < 1000,
  }) || errors.add(1);

  sleep(1);

  // API de pilotos
  response = http.get(`${BASE_URL}/api/pilotos`);
  check(response, {
    'pilotos API status is 200': (r) => r.status === 200,
    'pilotos API response is JSON': (r) => r.headers['Content-Type'].includes('application/json'),
    'pilotos API has data': (r) => JSON.parse(r.body).length > 0,
  }) || errors.add(1);

  sleep(2);
}

--------------------------------------------------------------------------------------------------
Script para ejecutar k6

@echo off
echo Ejecutando pruebas de rendimiento con k6...

REM Comprobar si k6 está instalado
k6 version >nul 2>&1
if %ERRORLEVEL% NEQ 0 (
  echo k6 no está instalado. Por favor, instálalo desde https://k6.io/docs/getting-started/installation/
  exit /b 1
)

echo Selecciona el entorno:
echo 1. PC (Minikube) - 172.26.48.240:30080
echo 2. Notebook (Docker Desktop) - localhost:30080
set /p env="Opción: "

if "%env%"=="1" (
  k6 run --env BASE_URL=http://172.26.48.240:30080 k6_load_test.js
) else if "%env%"=="2" (
  k6 run --env BASE_URL=http://localhost:30080 k6_load_test.js
) else (
  echo Opción no válida.
  exit /b 1
)

echo Pruebas de rendimiento completadas.
pause




--------------------------------------------------------------------------------------------------
4. Calidad de Código Fuente
Configuración de SonarQube con Docker


version: '3'
services:
  sonarqube:
    image: sonarqube:latest
    ports:
      - "9000:9000"
    environment:
      - SONAR_JDBC_URL=jdbc:postgresql://db:5432/sonar
      - SONAR_JDBC_USERNAME=sonar
      - SONAR_JDBC_PASSWORD=sonar
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    depends_on:
      - db
  
  db:
    image: postgres:13
    environment:
      - POSTGRES_USER=sonar
      - POSTGRES_PASSWORD=sonar
      - POSTGRES_DB=sonar
    volumes:
      - postgresql:/var/lib/postgresql/data

volumes:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  postgresql:



--------------------------------------------------------------------------------------------------
Script para análisis de código Java con SonarQube
@echo off
echo Analizando código Java con SonarQube...

REM Asegúrate de que SonarQube está en ejecución
echo Verificando si SonarQube está en ejecución...
curl -s http://localhost:9000 >nul
if %ERRORLEVEL% NEQ 0 (
  echo SonarQube no está en ejecución. Iniciando...
  cd tests\code-quality
  docker-compose up -d
  echo Esperando a que SonarQube inicie (30 segundos)...
  timeout /t 30 >nul
)

REM Configurar token SonarQube (generarlo en la interfaz web y reemplazar)
set SONAR_TOKEN=myAuthenticationToken

cd backend

REM Analizar cada microservicio
for %%i in (config-service eureka-service gateway-service m1 m2 m3 m4 m5 m6 m7) do (
  echo Analizando %%i...
  cd %%i
  mvn clean verify sonar:sonar -Dsonar.projectKey=kartingRM-%%i -Dsonar.host.url=http://localhost:9000 -Dsonar.login=%SONAR_TOKEN%
  cd ..
)

echo Análisis de código Java completado.
echo Accede a http://localhost:9000 para ver los resultados.
cd ..
pause


--------------------------------------------------------------------------------------------------
Script para análisis de código Frontend con SonarQube


@echo off
echo Analizando código Frontend con SonarQube...

REM Configurar token SonarQube (generarlo en la interfaz web y reemplazar)
set SONAR_TOKEN=myAuthenticationToken

cd frontend

REM Instalar dependencias si es necesario
if not exist node_modules (
  npm install
)

REM Ejecutar ESLint y generar reporte
npx eslint --ext .js,.jsx,.ts,.tsx src/ -o eslint-report.json -f json

REM Ejecutar análisis SonarQube
npx sonarqube-scanner -Dsonar.projectKey=kartingRM-frontend -Dsonar.sources=src -Dsonar.host.url=http://localhost:9000 -Dsonar.login=%SONAR_TOKEN% -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info -Dsonar.eslint.reportPaths=eslint-report.json

echo Análisis de código Frontend completado.
echo Accede a http://localhost:9000 para ver los resultados.
cd ..
pause


--------------------------------------------------------------------------------------------------
Ejecución completa de pruebas
Finalmente, crea un script para ejecutar todas las pruebas:


@echo off
echo ===============================================
echo EJECUTANDO SUITE COMPLETA DE PRUEBAS
echo ===============================================

echo.
echo 1. Ejecutando pruebas funcionales...
cd tests\functional
npx cypress run
cd ..\..

echo.
echo 2. Ejecutando pruebas de rendimiento...
cd tests\performance
call run_k6_tests.bat
cd ..\..

echo.
echo 3. Analizando calidad de código...
cd tests\code-quality
call analyze_java.bat
call analyze_frontend.bat
cd ..\..

echo.
echo 4. Recordatorio: Realizar pruebas de usabilidad
echo   - Revisar tests\usability\nielsen_checklist.md
echo   - Aplicar tests\usability\sus_questionnaire.md a usuarios reales

echo.
echo ===============================================
echo PRUEBAS COMPLETADAS
echo ===============================================
pause


Esta implementación te proporciona una suite completa de pruebas que cubre todos los aspectos solicitados. Puedes adaptar cada script según las necesidades específicas de tu aplicación.