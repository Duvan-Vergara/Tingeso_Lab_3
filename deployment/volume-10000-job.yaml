apiVersion: v1
kind: ConfigMap
metadata:
  name: volume-10000-config
data:
  generate-10000-reserves.sql: |
    USE reserve;
    
    -- Configuraci√≥n para inserci√≥n masiva
    SET autocommit = 0;
    SET unique_checks = 0;
    SET foreign_key_checks = 0;
    SET sql_log_bin = 0;
    
    -- Limpiar reservas de pruebas anteriores
    DELETE FROM reserves_users WHERE reserve_id > 100;
    DELETE FROM reserves WHERE id > 100;
    
    -- Generar 10,000 reservas usando un script SQL program√°tico
    -- Esto usa un enfoque m√°s eficiente con n√∫meros generados
    
    -- Paso 1: Crear tabla temporal con n√∫meros del 1 al 10,000
    CREATE TEMPORARY TABLE IF NOT EXISTS numbers (n INT);
    INSERT INTO numbers VALUES (1);
    INSERT INTO numbers SELECT n + 1 FROM numbers;
    INSERT INTO numbers SELECT n + 2 FROM numbers;
    INSERT INTO numbers SELECT n + 4 FROM numbers;
    INSERT INTO numbers SELECT n + 8 FROM numbers;
    INSERT INTO numbers SELECT n + 16 FROM numbers;
    INSERT INTO numbers SELECT n + 32 FROM numbers;
    INSERT INTO numbers SELECT n + 64 FROM numbers;
    INSERT INTO numbers SELECT n + 128 FROM numbers;
    INSERT INTO numbers SELECT n + 256 FROM numbers;
    INSERT INTO numbers SELECT n + 512 FROM numbers;
    INSERT INTO numbers SELECT n + 1024 FROM numbers;
    INSERT INTO numbers SELECT n + 2048 FROM numbers;
    INSERT INTO numbers SELECT n + 4096 FROM numbers WHERE n + 4096 <= 10000;
    
    -- Paso 2: Generar 10,000 reservas usando la tabla de n√∫meros
    INSERT INTO reserves (reserveday, begin, finish, tariff_id, final_price)
    SELECT 
        DATE_ADD('2025-07-09', INTERVAL (n % 30) DAY) as reserveday,
        TIME(CONCAT(
            LPAD(8 + (n % 15), 2, '0'), ':',
            LPAD(((n % 4) * 15), 2, '0'), ':00'
        )) as begin_time,
        TIME(CONCAT(
            LPAD(9 + (n % 15), 2, '0'), ':',
            LPAD(((n % 4) * 15), 2, '0'), ':00'
        )) as finish_time,
        ((n % 3) + 1) as tariff_id,
        (25000 + ((n % 4) * 10000)) as final_price
    FROM numbers 
    WHERE n <= 10000;
    
    -- Paso 3: Asignar usuarios a las reservas (1-3 usuarios por reserva)
    INSERT INTO reserves_users (reserve_id, user_id)
    SELECT 
        r.id as reserve_id,
        (((r.id - 100) % 70) + 1) as user_id
    FROM reserves r
    WHERE r.id > 100;
    
    -- Agregar usuarios adicionales a algunas reservas (grupos)
    INSERT INTO reserves_users (reserve_id, user_id)
    SELECT 
        r.id as reserve_id,
        (((r.id - 100 + 20) % 70) + 1) as user_id
    FROM reserves r
    WHERE r.id > 100 AND (r.id % 3) = 0;
    
    -- Agregar un tercer usuario a reservas m√°s grandes
    INSERT INTO reserves_users (reserve_id, user_id)
    SELECT 
        r.id as reserve_id,
        (((r.id - 100 + 40) % 70) + 1) as user_id
    FROM reserves r
    WHERE r.id > 100 AND (r.id % 5) = 0;
    
    COMMIT;
    
    -- Limpiar tabla temporal
    DROP TEMPORARY TABLE IF EXISTS numbers;
    
    -- Restaurar configuraci√≥n
    SET foreign_key_checks = 1;
    SET unique_checks = 1;
    SET autocommit = 1;
    
    -- Verificar resultado
    SELECT 
        'VOLUMEN 10,000 GENERADO' as status,
        COUNT(*) as total_reservas,
        COUNT(DISTINCT reserveday) as dias_con_reservas,
        MIN(reserveday) as primera_reserva,
        MAX(reserveday) as ultima_reserva
    FROM reserves;
    
    SELECT 
        'ASIGNACIONES CREADAS' as status,
        COUNT(*) as total_asignaciones,
        COUNT(DISTINCT user_id) as usuarios_asignados
    FROM reserves_users;
    
    SELECT '‚úÖ SISTEMA LISTO PARA PRUEBAS DE VOLUMEN CON 10,000 RESERVAS' as resultado;

---
apiVersion: batch/v1
kind: Job
metadata:
  name: volume-10000-job
spec:
  ttlSecondsAfterFinished: 3600
  backoffLimit: 3
  activeDeadlineSeconds: 1800
  template:
    spec:
      containers:
      - name: mysql-client
        image: mysql:latest
        command:
        - sh
        - -c
        - |
          set -e
          echo "üöÄ GENERANDO 10,000 RESERVAS REALES PARA PRUEBAS DE VOLUMEN"
          echo "üìä Distribuyendo reservas en 30 d√≠as con diferentes horarios"
          echo "‚è∞ Tiempo estimado: 3-5 minutos"
          
          # Esperar BD
          timeout=120
          elapsed=0
          while [ $elapsed -lt $timeout ]; do
            if mysql -h reserve-service-db-service -uroot -proot -e "SELECT 1" > /dev/null 2>&1; then
              echo "‚úÖ BD disponible"
              break
            fi
            sleep 5
            elapsed=$((elapsed + 5))
          done
          
          if [ $elapsed -ge $timeout ]; then
            echo "‚ùå Error: BD no disponible"
            exit 1
          fi
          
          # Verificar BD reserve
          if ! mysql -h reserve-service-db-service -uroot -proot -e "USE reserve; SELECT 1;" > /dev/null 2>&1; then
            echo "‚ùå Error: BD 'reserve' no existe"
            exit 1
          fi
          
          echo "üìà Ejecutando generaci√≥n program√°tica de 10,000 reservas..."
          mysql -h reserve-service-db-service -uroot -proot < /scripts/generate-10000-reserves.sql
          
          echo "‚úÖ 10,000 RESERVAS GENERADAS EXITOSAMENTE"
          echo "üéØ Sistema listo para pruebas de:"
          echo "   - RF5 Load Testing: 1000+ usuarios creando reservas"
          echo "   - RF5 Stress Testing: 5000+ usuarios simult√°neos"
          echo "   - RF7 Volume Testing: Consultas sobre 10,000 reservas"
          echo "   - RF8 Volume Testing: Reportes sobre 10,000 reservas"
          
        volumeMounts:
        - name: sql-script
          mountPath: /scripts
        resources:
          limits:
            memory: "512Mi"
            cpu: "500m"
          requests:
            memory: "256Mi"
            cpu: "200m"
      restartPolicy: Never
      volumes:
      - name: sql-script
        configMap:
          name: volume-10000-config
          defaultMode: 0644
