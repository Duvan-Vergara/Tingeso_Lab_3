<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="RF8 - REPORTE INGRESOS - VOLUME TEST ESCALABLE">
      <stringProp name="TestPlan.comments">VOLUME TESTING ESCALABLE para RF8 - Reporte de Ingresos
      Este JMX NO realiza poblamiento masivo, solo consulta reportes bajo carga.
      El poblamiento de la BD debe hacerse antes con scripts/YAML.
      </stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="RF8 Volume Test - ${__P(USERS,1000)} Usuarios Reportes">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControllerGui" testclass="LoopController" testname="Loop Controller">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${__P(LOOPS,50)}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(USERS,1000)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(RAMP_TIME,300)}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${__P(DURATION,3600)}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
      </ThreadGroup>
      <hashTree>
        <!-- JSR223 PreProcessor para generar períodos dinámicos -->
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Dynamic Report Periods">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="script">
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Calendar

// Generar períodos diversos para reportes de volumen
def threadNum = ctx.getThreadNum()
def iterationNum = vars.get("__jm__Loop Controller__idx") as Integer ?: 0
def uniqueId = (threadNum * 10000) + iterationNum

// Diferentes tipos de períodos para probar volumen
def cal = Calendar.getInstance()
def dateFormat = new SimpleDateFormat("yyyy-MM-dd")

// Variación de períodos: diarios, semanales, mensuales, anuales
def periodType = uniqueId % 4

switch(periodType) {
    case 0: // Período diario (más específico, menos datos)
        cal.add(Calendar.DAY_OF_YEAR, -(uniqueId % 30))
        def startDate = cal.getTime()
        cal.add(Calendar.DAY_OF_YEAR, 1)
        def endDate = cal.getTime()
        vars.put("reportStart", dateFormat.format(startDate))
        vars.put("reportEnd", dateFormat.format(endDate))
        vars.put("periodType", "DAILY")
        break
    case 1: // Período semanal (volumen medio)
        cal.add(Calendar.WEEK_OF_YEAR, -(uniqueId % 12))
        def startDate = cal.getTime()
        cal.add(Calendar.WEEK_OF_YEAR, 1)
        def endDate = cal.getTime()
        vars.put("reportStart", dateFormat.format(startDate))
        vars.put("reportEnd", dateFormat.format(endDate))
        vars.put("periodType", "WEEKLY")
        break
    case 2: // Período mensual (alto volumen)
        cal.add(Calendar.MONTH, -(uniqueId % 12))
        def startDate = cal.getTime()
        cal.add(Calendar.MONTH, 1)
        def endDate = cal.getTime()
        vars.put("reportStart", dateFormat.format(startDate))
        vars.put("reportEnd", dateFormat.format(endDate))
        vars.put("periodType", "MONTHLY")
        break
    case 3: // Período anual (máximo volumen)
        cal.add(Calendar.YEAR, -(uniqueId % 3 + 1))
        def startDate = cal.getTime()
        cal.add(Calendar.YEAR, 1)
        def endDate = cal.getTime()
        vars.put("reportStart", dateFormat.format(startDate))
        vars.put("reportEnd", dateFormat.format(endDate))
        vars.put("periodType", "YEARLY")
        break
}

// Log para debugging volumen
def users = vars.get("__P(USERS,1000)")
def start = vars.get("reportStart")
def end = vars.get("reportEnd")
def type = vars.get("periodType")
log.info("RF8-VOLUME-${users}U [T${threadNum}-I${iterationNum}]: ${type} ${start} to ${end}")
          </stringProp>
        </JSR223PreProcessor>
        <hashTree/>
        
        <!-- Consulta principal: Reporte de Ingresos con volumen -->
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RF8-VOLUME: Generar Reporte Ingresos (${periodType})">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">localhost</stringProp>
          <stringProp name="HTTPSampler.port">30088</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/reportes/report/tariff?startDate=${reportStart}&amp;endDate=${reportEnd}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verificar Response 200">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <!-- Validar Content-Type Excel -->
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verificar Content-Type Excel">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49587">application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <!-- Validar nombre de archivo en Content-Disposition -->
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verificar Nombre Archivo">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49588">reporte_tarifas.xlsx</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <!-- Validar tamaño mínimo de archivo (mayor a 1000 bytes) -->
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Validar tamaño mínimo archivo Excel">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="script">
          if (prev.getResponseData().length &lt; 1000) {
              AssertionResult.setFailure(true)
              AssertionResult.setFailureMessage("El archivo Excel es demasiado pequeño")
          }
            </stringProp>
          </JSR223Assertion>

          <hashTree/>
          <!-- Tiempo de respuesta más tolerante para volumen -->
          <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Reporte Volumen menor 30s">
            <stringProp name="DurationAssertion.duration">30000</stringProp>
          </DurationAssertion>
          <hashTree/>
        </hashTree>

        <!-- ...eliminado el sampler de reporte de tamaño de grupo... -->

        <!-- Stress adicional: Múltiples reportes concurrentes -->
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RF8-VOLUME: Validar Sistema bajo Volumen">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">localhost</stringProp>
          <stringProp name="HTTPSampler.port">30088</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/reserves/</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
        </HTTPSamplerProxy>
        <hashTree>
          <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Sistema Estable bajo Volumen">
            <stringProp name="DurationAssertion.duration">15000</stringProp>
          </DurationAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
